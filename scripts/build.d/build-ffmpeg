#!/bin/bash

set -o errexit
set -o xtrace

tagname="${1}"

builddir="/srv/jellyfin"
repodir="/srv/repository"
reponame="jellyfin-ffmpeg"
repotype="ffmpeg"

pushd ${builddir}

# Grab the source and init
./build ${reponame} --clone-only

pushd projects/${repotype}/${reponame}

# Check out the tag
git tag -d tags/${tagname} || true
git fetch --all
git checkout tags/${tagname}

# Initialize the submodule
git submodule update --init

# Check if there's a diff in the Docker image setup; don't rebuild that unless we *need* to
tags=( $( hub release -L2 ) )
docker_diff="$( git diff tags/${tags[1]} tags/${tags[0]} docker/ | wc -l )"
if [[ ${docker_diff} -gt 0 ]]; then
    rebuild_docker="y"
else
    rebuild_docker="n"
fi

popd

# Build Docker packages
#if [[ ${rebuild_docker} == "y" ]]; then
#    /bin/bash ${builddir}/scripts/build.d/build-ffmpeg-docker ${tagname} build-docker-manifests=yes
#fi

# Build the packages
./build ${reponame}

# Copy the output to the repo dir
rsync -avc bin/${reponame}/ ${repodir}/incoming/${reponame}_${tagname}

# Execute import job on repo dir
sudo ${repodir}/collect-ffmpeg.sh ${repodir}/incoming/${reponame}_${tagname}

# Upload artifacts to the GitHub release
for artifact in bin/${reponame}/*.{deb,buildinfo}; do
    if [[ -f ${artifact} ]]; then
        /bin/bash ${builddir}/scripts/upload-artifact "${reponame}" "${tagname}" "${artifact}"
    fi
done

# Rebuild the latest Jellyfin Docker packages to use new ffmpeg Docker packages
#if [[ ${rebuild_docker} == "y" ]]; then
#    /bin/bash ${builddir}/scripts/build.d/build-jellyfin-docker latest build-docker-manifests=no
#fi

# Clean up
rm -r ${builddir}/bin/jellyfin-ffmpeg
popd
docker image rm -f $( docker images -aq ) || true
exit 0
