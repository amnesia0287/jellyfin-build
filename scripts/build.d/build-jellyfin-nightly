#!/bin/bash

set -o errexit

echo "------------------------------------------------------------------"
echo "Running Jellyfin nightly autobuild at $( date )"
echo "------------------------------------------------------------------"

yesterday="$( date --date='yesterday' )"

tagname="$( date +%Y%m%d )"

builddir="/srv/jellyfin"
repodir="/srv/repository"
reponame="jellyfin"
repotype="server"

# Delay until there's no release process building, if required
while [[ -n "$( ps aux | grep "/bin/bash /srv/jellyfin/scripts/release.d/[r]elease" )" ]]; do
    echo "Waiting 30s for existing release builds to finish..."
    sleep 30
done
echo "Proceeding with build..."

set -o xtrace

######
# HACK FOR STABLE RELEASES
######
do_dotnet2() {
    sudo apt purge -y dotnet-sdk-3.1 || true
    sudo apt autoremove -y || true
    sudo apt install -y dotnet-sdk-2.2 || true
}
do_dotnet3() {
    sudo apt purge -y dotnet-sdk-2.2 || true
    sudo apt autoremove -y || true
    sudo apt install -y dotnet-sdk-3.1 || true
}

# Just in case
do_dotnet3

echo "*** PREPARING REPOSITORY ***"
pushd ${builddir}

# Grab the source and init
./build ${reponame} --clone-only

pushd projects/${repotype}

pushd jellyfin

# Check out master
git fetch --all
git reset --hard HEAD
git clean -fd
git checkout origin/master

# Determine our changelog from the last nightly (main)
git_log_main="$( git log --merges --since "${yesterday}" --grep 'Merge pull request' --oneline | grep --color=none --only-matching 'Merge .*$' || true)"

popd
pushd jellyfin-web

git fetch --all
git reset --hard HEAD
git clean -fd
git checkout origin/master

# Determine our changelog from the last nightly (web)
git_log_web="$( git log --merges --since "${yesterday}" --grep 'Merge pull request' --oneline | grep --color=none --only-matching 'Merge .*$' || true)"

popd

if [[ -z ${git_log_main} && -z ${git_log_web} ]]; then
    # We have no log since yesterday; don't build a nightly today
    echo "No new pull request merges since yesterday. Aborting unneccessary build."
    exit 0
else
    git_log="$git_log_main $git_log_web"
fi

for dir in jellyfin-web jellyfin; do

if [[ ${dir} == 'jellyfin' ]]; then
    pkgtype="server"
else
    pkgtype="web"
fi

pushd $dir

if [[ ${pkgtype} == 'server' ]]; then
    # Perform nuget restore
    dotnet restore --no-cache
fi

echo "*** PREPARING OS PACKAGE SETTINGS ***"
# Set the package name to `jellyfin-nightly`
pushd debian/
sed -i "/^Source/ s/jellyfin-${pkgtype}/jellyfin-${pkgtype}-nightly/" control
sed -i "/^Package/ s/jellyfin-${pkgtype}/jellyfin-${pkgtype}-nightly/" control
sed -i "/^Replaces/ s/$/, jellyfin-${pkgtype}/" control
sed -i "/^Breaks/ s/$/, jellyfin-${pkgtype}/" control
sed -i "/^Conflicts/ s/$/, jellyfin-${pkgtype}/" control

# Set the changelog
formatted_git_log="$( sed 's/^/  * /' <<<"${git_log}" )"
cat <<EOF >changelog
jellyfin-${pkgtype}-nightly ($( date +%Y%m%d )) unstable; urgency=medium

${formatted_git_log}

 -- Jellyfin Packaging Team <packaging@jellyfin.org>  $( date --rfc-2822 )
EOF

if [[ ${pkgtype} == 'server' ]]; then
    pushd metapackage

    sed -i "s/jellyfin/jellyfin-nightly/g" jellyfin
    sed -i "s/jellyfin-nightly-server/jellyfin-server-nightly (=$( date +%Y%m%d ))/g" jellyfin
    sed -i "s/jellyfin-nightly-web/jellyfin-web-nightly (=$( date +%Y%m%d ))/g" jellyfin
    sed -i "s/^Version: .*$/Version: $( date +%Y%m%d )/g" jellyfin
    echo "Replaces: jellyfin" >> jellyfin
    echo "Breaks: jellyfin" >> jellyfin
    echo "Conflicts: jellyfin" >> jellyfin

    equivs-build jellyfin
    mkdir -p ../../../bin/debian/ ../../../bin/ubuntu/
    cp jellyfin*.deb ../../../bin/debian/
    cp jellyfin*.deb ../../../bin/ubuntu/
    rm *.deb

    popd
fi

popd

# Build OS packages
set +o errexit
echo "*** BUILDING OS PACKAGES ***"
server_releases=( "debian.amd64" "debian.arm64" "debian.armhf" "ubuntu.amd64" "ubuntu.arm64" "ubuntu.armhf" )
web_releases=( "debian" )
if [[ ${pkgtype} == 'server' ]]; then
    releases=( ${server_releases[@]} )
else
    releases=( ${web_releases[@]} )
fi
for release in ${releases[@]}; do

./build.sh -t docker -p ${release}
if [[ ${pkgtype} == 'web' ]]; then
    for srelease in ${server_releases[@]}; do
        cp ../bin/${release}/* ../bin/${srelease}/
    done
    rm -rf ../bin/${release}
fi
set -o errexit

done
popd
done
popd

mkdir -p bin/${reponame}
cp -a projects/server/bin/* bin/${reponame}/

#echo "*** GRABBING LATEST WINDOWS INSTALLER FROM AZURE ***"
installer_tmpdir="$( mktemp -d )"
azure_build_id="$( az pipelines runs list --branch master --pipeline-ids 1 --reason batchedCI --result succeeded --status completed --query-order QueueTimeDesc --top 1 | jq '.[].id' )"
az pipelines runs artifact download --artifact-name 'Jellyfin Server Setup' --path ${installer_tmpdir} --run-id ${azure_build_id} || true
mkdir -p bin/jellyfin/win-installer
mmv "${installer_tmpdir}/jellyfin_*_windows-*.exe" "bin/jellyfin/win-installer/jellyfin-nightly_${tagname}-#2.exe" || true
rm -rf ${installer_tmpdir}

# Copy the output to the repo server
echo "*** SYNCING OS PACKAGES TO REPO ***"
rsync -avz bin/${reponame}/ ${repodir}/incoming/${reponame}_${tagname}

# Execute import job on repo server
echo "*** COLLECTING PACKAGES FOR REPO ***"
sudo ${repodir}/collect-server.sh ${repodir}/incoming/${reponame}_${tagname} nightly

# Clean up
echo "*** CLEANING UP ***"
pushd projects/${repotype}/${reponame}
git reset --hard HEAD
git clean -fd
popd
rm -r ${builddir}/bin/jellyfin
popd
docker image rm -f $( docker images -aq ) || true

echo "------------------------------------------------------------------"
echo "Completed Jellyfin nightly autobuild at $( date )"
echo "------------------------------------------------------------------"
exit 0
