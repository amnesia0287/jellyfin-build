#!/bin/bash

set -o errexit

echo "------------------------------------------------------------------"
echo "Running Jellyfin nightly autobuild at $( date )"
echo "------------------------------------------------------------------"

yesterday="$( date --date='yesterday' )"

tagname="$( date +%Y%m%d )"

builddir="/srv/jellyfin"
repodir="/srv/repository"
reponame="jellyfin"
repotype="server"

# Delay until there's no release process building, if required
while [[ -n "$( ps aux | grep "/bin/bash /srv/jellyfin/scripts/release.d/[r]elease" )" ]]; do
    echo "Waiting 30s for existing release builds to finish..."
    sleep 30
done
echo "Proceeding with build..."

set -o xtrace

######
# HACK FOR STABLE RELEASES
######
do_dotnet2() {
    sudo apt purge -y dotnet-sdk-3.1 || true
    sudo apt autoremove -y || true
    sudo apt install -y dotnet-sdk-2.2 || true
}
do_dotnet3() {
    sudo apt purge -y dotnet-sdk-2.2 || true
    sudo apt autoremove -y || true
    sudo apt install -y dotnet-sdk-3.1 || true
}

# Just in case
do_dotnet3

echo "*** PREPARING REPOSITORY ***"
pushd ${builddir}

# Grab the source and init
./build ${reponame} --clone-only

pushd projects/${repotype}/${reponame}

# Check out master
git fetch --all
git reset --hard HEAD
git clean -fd
git checkout origin/master

pushd ../jellyfin-web
git fetch --all
git reset --hard HEAD
git clean -fd
git checkout origin/master
# Determine our changelog from the last nightly (web)
git_log_web="$( git log --merges --since "${yesterday}" --grep 'Merge pull request' --oneline | grep --color=none --only-matching 'Merge .*$' || true)"
popd

# Determine our changelog from the last nightly (main)
git_log_main="$( git log --merges --since "${yesterday}" --grep 'Merge pull request' --oneline | grep --color=none --only-matching 'Merge .*$' || true)"

if [[ -z ${git_log_main} && -z ${git_log_web} ]]; then
    # We have no log since yesterday; don't build a nightly today
    echo "No new pull request merges since yesterday. Aborting unneccessary build."
    exit 0
else
    git_log="$git_log_main $git_log_web"
fi

# Perform nuget restore
dotnet restore --no-cache

echo "*** PREPARING OS PACKAGE SETTINGS ***"
# Set the package name to `jellyfin-nightly`
pushd deployment/debian-package-x64/pkg-src
sed -i '/^Source/ s/jellyfin/jellyfin-nightly/' control
sed -i '/^Package/ s/jellyfin/jellyfin-nightly/' control
sed -i '/^Replaces/ s/$/, jellyfin/' control
sed -i '/^Breaks/ s/$/, jellyfin/' control
sed -i '/^Conflicts/ s/$/, jellyfin/' control

# Set the changelog
formatted_git_log="$( sed 's/^/  * /' <<<"${git_log}" )"
cat <<EOF >changelog
jellyfin-nightly ($( date +%Y%m%d )) unstable; urgency=medium

${formatted_git_log}

 -- Jellyfin Packaging Team <packaging@jellyfin.org>  $( date --rfc-2822 )
EOF

popd

popd

# Build OS packages
set +o errexit
echo "*** BUILDING OS PACKAGES ***"
./build "${reponame}" debian-package-x64
./build "${reponame}" debian-package-armhf
./build "${reponame}" debian-package-arm64
./build "${reponame}" ubuntu-package-x64
./build "${reponame}" ubuntu-package-armhf
./build "${reponame}" ubuntu-package-arm64

./build "${reponame}" portable
mmv "bin/${reponame}/portable/jellyfin*.portable.tar.gz" "bin/${reponame}/portable/jellyfin-nightly_${tagname}.tar.gz"
./build "${reponame}" macos
mmv "bin/${reponame}/macos/jellyfin*.portable.tar.gz" "bin/${reponame}/macos/jellyfin-nightly_${tagname}.tar.gz"
./build "${reponame}" linux-x64
mmv "bin/${reponame}/linux-x64/jellyfin*.portable.tar.gz" "bin/${reponame}/linux-x64/jellyfin-nightly_${tagname}.tar.gz"
./build "${reponame}" win-x64
mmv "bin/${reponame}/win-x64/jellyfin_*.zip" "bin/${reponame}/win-x64/jellyfin-nightly_${tagname}.zip"
./build "${reponame}" win-x86
mmv "bin/${reponame}/win-x86/jellyfin_*.zip" "bin/${reponame}/win-x86/jellyfin-nightly_${tagname}.zip"
set -o errexit

echo "*** GRABBING LATEST WINDOWS INSTALLER FROM AZURE ***"
installer_tmpdir="$( mktemp -d )"
azure_build_id="$( az pipelines runs list --branch master --pipeline-ids 1 --reason batchedCI --result succeeded --status completed --query-order QueueTimeDesc --top 1 | jq '.[].id' )"
az pipelines runs artifact download --artifact-name 'Jellyfin Server Setup' --path ${installer_tmpdir} --run-id ${azure_build_id}
mkdir -p bin/jellyfin/win-installer
mmv "${installer_tmpdir}/jellyfin_*_windows-*.exe" "bin/jellyfin/win-installer/jellyfin-nightly_${tagname}-#2.exe"
rm -rf ${installer_tmpdir}

# Copy the output to the repo server
echo "*** SYNCING OS PACKAGES TO REPO ***"
rsync -avz bin/${reponame}/ ${repodir}/incoming/${reponame}_${tagname}

# Execute import job on repo server
echo "*** COLLECTING PACKAGES FOR REPO ***"
/bin/bash ${repodir}/collect-server.sh ${repodir}/incoming/${reponame}_${tagname} nightly

# Build Docker containers (self-contained)
set +o errexit
echo "*** BUILDING DOCKER IMAGES ***"
/bin/bash ${builddir}/scripts/build.d/build-jellyfin-docker-nightly
set -o errexit

# Clean up
echo "*** CLEANING UP ***"
pushd projects/${repotype}/${reponame}
git reset --hard HEAD
git clean -fd
popd
rm -r ${builddir}/bin/jellyfin
popd
docker image rm -f $( docker images -aq ) || true
exit 0
